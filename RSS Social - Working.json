{
  "name": "RSS Social - Working",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        0,
        528
      ],
      "id": "0999ced3-7b71-4a55-9ca3-3771156cd457",
      "name": "When clicking ‚ÄòExecute workflow‚Äô"
    },
    {
      "parameters": {
        "url": "https://www.arnewsline.org/?format=rss",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        224,
        144
      ],
      "id": "726f6523-d415-4b6e-9fc2-a0fffce407c2",
      "name": "RSS Read",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Create an engaging social media post based on this article. Use the enhanced content and include the TinyURL for rich preview. Maximum 200 characters. {{ $json.enhancedContent || $json.content }} {{ $('Tiny').item.json.data.tiny_url || $json.link }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        1568,
        288
      ],
      "id": "cfd1521c-189a-4f00-9321-20490cc61799",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "jsCode": "// Text Cleanup: Remove unwanted LLM formatting tokens and clean up text\nconst items = await $input.all();\nconst out = [];\n\nfor (const item of items) {\n  try {\n    let cleanedText = item.json.text || '';\n    \n    // Remove OpenRouter/LLM internal tokens\n    cleanedText = cleanedText\n      .replace(/<\\|start\\|>/g, '')\n      .replace(/<\\|channel\\|>/g, '')\n      .replace(/<\\|message\\|>/g, '')\n      .replace(/<\\|end\\|>/g, '')\n      .replace(/assistant/g, '')\n      .replace(/final/g, '')\n      .replace(/user/g, '')\n      .replace(/system/g, '')\n      .replace(/<\\|im_start\\|>/g, '')\n      .replace(/<\\|im_end\\|>/g, '')\n      .replace(/<\\|im_start\\|>assistant/g, '')\n      .replace(/<\\|im_start\\|>user/g, '')\n      .replace(/<\\|im_start\\|>system/g, '')\n      .replace(/<\\|im_end\\|>/g, '');\n    \n    // Clean up extra whitespace and newlines\n    cleanedText = cleanedText\n      .replace(/\\n\\s*\\n/g, '\\n')\n      .replace(/^\\s+|\\s+$/g, '')\n      .replace(/\\s+/g, ' ');\n    \n    // Remove any remaining angle bracket patterns that look like tokens\n    cleanedText = cleanedText.replace(/<\\|[^>]*\\|>/g, '');\n    \n    // Ensure the text is not empty\n    if (!cleanedText.trim()) {\n      cleanedText = 'Article shared from RSS feed';\n    }\n    \n    console.log(`üßπ Cleaned text: ${cleanedText.substring(0, 100)}...`);\n    \n    const cleanedItem = {\n      json: {\n        ...item.json,\n        text: cleanedText,\n        originalText: item.json.text || '',\n        cleanedAt: new Date().toISOString()\n      }\n    };\n    \n    out.push(cleanedItem);\n    \n  } catch (error) {\n    console.error('Error cleaning text:', error);\n    out.push(item);\n  }\n}\n\nconsole.log(`Cleaned ${out.length} items`);\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        288
      ],
      "id": "text-cleanup",
      "name": "Text Cleanup"
    },
    {
      "parameters": {
        "jsCode": "// Open Graph Metadata Fetcher for rich article previews\nconst items = await $input.all();\nconst out = [];\n\nfor (const item of items) {\n  try {\n    const originalUrl = item.json.link || '';\n    const tinyUrl = item.json.tiny_url || originalUrl;\n    \n    if (!originalUrl) {\n      console.log('No original URL found, skipping metadata fetch');\n      out.push(item);\n      continue;\n    }\n    \n    // Fetch the article page to extract Open Graph metadata\n    console.log(`Fetching metadata for: ${originalUrl}`);\n    \n    try {\n      const response = await fetch(originalUrl, {\n        method: 'GET',\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (compatible; RSS-Bot/1.0; +https://supes.com/rss-bot)'\n        },\n        timeout: 10000 // 10 second timeout\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}`);\n      }\n      \n      const html = await response.text();\n      \n      // Extract Open Graph metadata\n      const ogTitle = html.match(/<meta property=\"og:title\" content=\"([^\"]*)\"/i)?.[1] || \n                     html.match(/<title[^>]*>([^<]+)<\\/title>/i)?.[1] || \n                     item.json.title || 'Article';\n      \n      const ogDescription = html.match(/<meta property=\"og:description\" content=\"([^\"]*)\"/i)?.[1] || \n                           html.match(/<meta name=\"description\" content=\"([^\"]*)\"/i)?.[1] || \n                           item.json.contentSnippet || \n                           (item.json.content || '').replace(/<[^>]*>/g, '').substring(0, 200) || \n                           'Read more...';\n      \n      const ogImage = html.match(/<meta property=\"og:image\" content=\"([^\"]*)\"/i)?.[1] || \n                     html.match(/<meta name=\"twitter:image\" content=\"([^\"]*)\"/i)?.[1] || \n                     null;\n      \n      const ogUrl = html.match(/<meta property=\"og:url\" content=\"([^\"]*)\"/i)?.[1] || originalUrl;\n      \n      // Clean up the extracted data\n      const cleanTitle = ogTitle.replace(/&quot;/g, '\"').replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').trim();\n      const cleanDescription = ogDescription.replace(/&quot;/g, '\"').replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').trim();\n      \n      // Create enhanced item with Open Graph data\n      const enhancedItem = {\n        json: {\n          ...item.json,\n          // Original data\n          originalUrl: originalUrl,\n          tinyUrl: tinyUrl,\n          // Open Graph metadata\n          ogTitle: cleanTitle,\n          ogDescription: cleanDescription,\n          ogImage: ogImage,\n          ogUrl: ogUrl,\n          // Enhanced content for LLM\n          enhancedContent: `Title: ${cleanTitle}\\n\\nDescription: ${cleanDescription}\\n\\nOriginal URL: ${originalUrl}`,\n          // Metadata for social media formatting\n          hasImage: !!ogImage,\n          metadata: {\n            title: cleanTitle,\n            description: cleanDescription,\n            image: ogImage,\n            url: originalUrl,\n            tinyUrl: tinyUrl,\n            fetchedAt: new Date().toISOString()\n          }\n        }\n      };\n      \n      console.log(`‚úÖ Metadata fetched for: ${cleanTitle}`);\n      console.log(`   Image: ${ogImage ? 'Yes' : 'No'}`);\n      console.log(`   Description length: ${cleanDescription.length}`);\n      \n      out.push(enhancedItem);\n      \n    } catch (fetchError) {\n      console.error(`‚ùå Failed to fetch metadata for ${originalUrl}:`, fetchError.message);\n      \n      // Fallback to original item with basic enhancement\n      const fallbackItem = {\n        json: {\n          ...item.json,\n          originalUrl: originalUrl,\n          tinyUrl: tinyUrl,\n          ogTitle: item.json.title || 'Article',\n          ogDescription: (item.json.contentSnippet || item.json.content || '').replace(/<[^>]*>/g, '').substring(0, 200) || 'Read more...',\n          ogImage: null,\n          ogUrl: originalUrl,\n          enhancedContent: `Title: ${item.json.title || 'Article'}\\n\\nContent: ${(item.json.contentSnippet || '').substring(0, 300)}\\n\\nURL: ${originalUrl}`,\n          hasImage: false,\n          metadata: {\n            title: item.json.title || 'Article',\n            description: (item.json.contentSnippet || '').substring(0, 200),\n            image: null,\n            url: originalUrl,\n            tinyUrl: tinyUrl,\n            fetchedAt: new Date().toISOString(),\n            fetchError: fetchError.message\n          }\n        }\n      };\n      \n      out.push(fallbackItem);\n    }\n    \n  } catch (error) {\n    console.error('Error processing item for metadata:', error, item);\n    out.push(item);\n  }\n}\n\nconsole.log(`Processed ${out.length} items for Open Graph metadata`);\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1440,
        288
      ],
      "id": "og-metadata-fetcher",
      "name": "OG Metadata Fetcher"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        1632,
        512
      ],
      "id": "281f9905-ae78-459d-9247-0344e7abea14",
      "name": "OpenRouter Chat Model",
      "credentials": {
        "openRouterApi": {
          "id": "aJfMDY0IHJ0c1SX2",
          "name": "OpenRouter account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.tinyurl.com/create",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer PN6QeolO7tTTPV6rd8lrZCYXXFr409lj7qGpPv3pTvbHCQbaLTXtVCSODvy6"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $json.link }}"
            },
            {}
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        896,
        416
      ],
      "id": "5c72ea1b-684f-4bb1-bd3b-ee97964669e2",
      "name": "Tiny"
    },

    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1120,
        336
      ],
      "id": "023d2bcf-5d10-4078-8561-240da1958bd7",
      "name": "Merge"
    },
    {
      "parameters": {
        "url": "https://www.nasa.gov/aeronautics/feed/",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        224,
        336
      ],
      "id": "e7ea54ee-601a-4bcf-94f3-3c6a86592d79",
      "name": "RSS NASA"
    },
    {
      "parameters": {
        "url": "https://moxie.foxnews.com/google-publisher/politics.xml",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        224,
        720
      ],
      "id": "9fbb432f-e5a2-4008-b364-290e30b07866",
      "name": "Fox US Politics"
    },
    {
      "parameters": {
        "url": "https://moxie.foxnews.com/google-publisher/world.xml",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        224,
        912
      ],
      "id": "cd00996e-522a-472f-815c-442b0672df01",
      "name": "Fox World"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "242d0792-5423-471b-91c9-d359bfbbcf7a",
              "leftValue": "={{ $json.link }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        688,
        640
      ],
      "id": "26edef42-b6ad-4560-9957-e6577791f0c2",
      "name": "If"
    },
    {
      "parameters": {
        "batchSize": 3,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        1344,
        336
      ],
      "id": "002f4c97-d869-44cf-98f7-85198ddfac1b",
      "name": "Split In Batches"
    },
    {
      "parameters": {
        "jsCode": "// Clean data structure to prevent spread syntax errors\nconst items = await $input.all();\nconst out = [];\n\nfor (const item of items) {\n  try {\n    // Ensure we have clean, simple data structure\n    const cleanItem = {\n      json: {\n        // Extract and clean the content\n        content: String(item.json?.content || item.json?.description || ''),\n        // Keep other essential fields\n        title: String(item.json?.title || ''),\n        link: String(item.json?.link || ''),\n        dedupe_key: String(item.json?.dedupe_key || ''),\n        // Only include simple string fields, avoid complex objects\n        pubDate: item.json?.pubDate || item.json?.isoDate || '',\n        source: item.json?.source || ''\n      }\n    };\n    \n    out.push(cleanItem);\n  } catch (error) {\n    console.error('Error cleaning item:', error, item);\n    // Skip problematic items but continue processing\n    continue;\n  }\n}\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1472,
        336
      ],
      "id": "26ad0d4a-661e-4418-b28c-4b103a11d4ec",
      "name": "Data Cleaner"
    },
    {
      "parameters": {
        "postText": "={{ $json.text }}"
      },
      "type": "@muench-dev/n8n-nodes-bluesky.bluesky",
      "typeVersion": 2,
      "position": [
        1920,
        480
      ],
      "id": "56dad020-a75f-4aaf-a6a5-bfb829e3b0eb",
      "name": "Create a post",
      "credentials": {
        "blueskyApi": {
          "id": "2bM5j1QMNAiDYXKw",
          "name": "Bluesky account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "authentication": "webhook",
        "content": "={{ $json.text }}",
        "options": {}
      },
      "type": "n8n-nodes-base.discord",
      "typeVersion": 2,
      "position": [
        1920,
        672
      ],
      "id": "babfdefd-b5b9-471a-937e-8f48bc87501d",
      "name": "Discord",
      "webhookId": "7f532abc-66ab-46c0-8779-acd3f8d69520",
      "credentials": {
        "discordWebhookApi": {
          "id": "rqhLWsZ3P4OJnvDI",
          "name": "Discord Webhook account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "url": "https://masto.supes.com",
        "text": "={{ $json.text }}\\n\\n{{ $('Tiny').item.json.data.tiny_url || $json.link }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-mastodon.mastodon",
      "typeVersion": 1,
      "position": [
        1920,
        288
      ],
      "id": "1a44b737-aba6-491f-af15-c43648fb51e5",
      "name": "Publish new status",
      "retryOnFail": false,
      "credentials": {
        "mastodonOAuth2Api": {
          "id": "30lfLxisssKhPPyL",
          "name": "autoFeed"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "numberInputs": 4,
        "output": "empty"
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        2320,
        656
      ],
      "id": "d806f663-e625-4e9e-8027-6473203ae000",
      "name": "Merge1"
    },
    {
      "parameters": {
        "amount": 36
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2864,
        880
      ],
      "id": "06f4ae3c-b74e-4e29-9d64-def9368f350e",
      "name": "Wait Short",
      "webhookId": "6e640606-c6d3-46fd-bb20-232af6cdaa8d"
    },
    {
      "parameters": {
        "amount": 120
      },
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        2784,
        48
      ],
      "id": "0b21e686-2ab6-4c62-ad98-a7074071e11e",
      "name": "Wait Long",
      "webhookId": "9a9f63f7-85e9-4ab6-b2ba-d1b8677ab7c7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "8061be88-54f9-49c9-9ee1-93ae46bfc78f",
              "leftValue": "any",
              "rightValue": "429",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2560,
        320
      ],
      "id": "19676e5a-97d3-488e-8ac2-d253780b7aad",
      "name": "if - fail"
    },
    {
      "parameters": {
        "jsCode": "// Commit success (promote pending ‚Üí posted)\nconst state = $getWorkflowStaticData('global');\nstate.posted  = state.posted  || {};\nstate.pending = state.pending || {};\n\nconst NOW = Date.now();\nconst TTL_MS = 30*24*60*60*1000;\n\nconst items = await $input.all();\n\n// Optional: require all platforms succeeded\n// If you fan in with Merge:Append, you might get N items for the same key.\n// We'll commit on the first we see unless you enforce stricter checks.\nconst committed = new Set();\n\nfor (const item of items) {\n  const j = item.json || {};\n  const key = j.dedupe_key;\n  if (!key || committed.has(key)) continue;\n\n  // If you want \"ALL succeed\" logic, inspect j for each platform‚Äôs status here.\n\n  state.posted[key] = NOW;   // promote\n  delete state.pending[key]; // clear reservation\n  committed.add(key);\n}\n\n// TTL cleanup (posted only)\nfor (const k of Object.keys(state.posted)) {\n  if (NOW - state.posted[k] >= TTL_MS) delete state.posted[k];\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2800,
        512
      ],
      "id": "182e8155-33f8-401b-872a-1f498ba368d5",
      "name": "Commit"
    },
    {
      "parameters": {
        "chatId": "-1002899637373",
        "text": "={{ $json.text }}",
        "additionalFields": {
          "appendAttribution": false,
          "disable_notification": false
        }
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        1920,
        864
      ],
      "id": "e9b3b330-c921-4095-bd7d-8fbc08a57ee8",
      "name": "telegram",
      "webhookId": "f1383b21-5735-4c12-9050-0ca14161fba5",
      "credentials": {
        "telegramApi": {
          "id": "QoMqqcK9v4tT5gCO",
          "name": "Telegram account"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// === Persistent store ===\nconst state = $getWorkflowStaticData('global');\nstate.posted  = state.posted  || {};   // { key: timestamp }\nstate.pending = state.pending || {};   // { key: timestamp }\n\nconst NOW = Date.now();\nconst TTL_MS = 30*24*60*60*1000;     // 30 days\nconst PENDING_TTL = 2*60*60*1000;    // 2 hours ‚Äì avoids stuck pendings\nconst MAX_KEYS = 5000;\nconst MAX_PER_RUN = 0;               // 0 = unlimited\n\n// URL normaliser: conservative + strip tracking + ignore hashes\nfunction normalise(u) {\n  try {\n    const url = new URL(String(u));\n    url.hash = '';                               // ignore fragments\n    url.hostname = url.hostname.toLowerCase();   // host is case-insensitive\n    url.pathname = url.pathname.replace(/\\/+$/, ''); // trim trailing slash\n    // drop noisy trackers\n    for (const p of [\n      'utm_source','utm_medium','utm_campaign','utm_term','utm_content',\n      'gclid','fbclid','mc_cid','mc_eid','igshid','ref','campaign_id'\n    ]) url.searchParams.delete(p);\n    return url.toString();\n  } catch {\n    return (u || '').toString();\n  }\n}\n\n// Stable key preference: link ‚Üí guid ‚Üí hash(title+date+source)\nfunction keyForItem(j) {\n  const link = (typeof j.link === 'string' && j.link) ? normalise(j.link) : '';\n  if (link) return `u:${link}`;\n  if (j.guid)  return `g:${String(j.guid)}`;\n  const raw = `${j.title || ''}::${j.pubDate || j.isoDate || ''}::${j.source || ''}`;\n  const crypto = require('crypto');\n  return 'h:' + crypto.createHash('sha1').update(raw).digest('hex');\n}\n\n// Cleanup helpers\nfunction gc() {\n  // expire posted\n  for (const k of Object.keys(state.posted)) {\n    if (NOW - state.posted[k] >= TTL_MS) delete state.posted[k];\n  }\n  // expire stale pending (e.g., crash mid-run)\n  for (const k of Object.keys(state.pending)) {\n    if (NOW - state.pending[k] >= PENDING_TTL) delete state.pending[k];\n  }\n  // cap map sizes (keep most recent)\n  for (const map of [state.posted, state.pending]) {\n    const keys = Object.keys(map);\n    if (keys.length > MAX_KEYS) {\n      keys.sort((a,b) => map[b]-map[a]);\n      for (const k of keys.slice(MAX_KEYS)) delete map[k];\n    }\n  }\n}\n\ngc();\n\nconst items = await $input.all();\nconst out = [];\nlet emitted = 0;\nlet skipped = 0;\n\nfor (const item of items) {\n  const j = item.json || {};\n  const key = keyForItem(j);\n  if (!key) continue;\n\n  // already posted recently?\n  if (state.posted[key] && (NOW - state.posted[key]) < TTL_MS) {\n    skipped++;\n    continue;\n  }\n\n  // in-flight already? (another execution is working on it)\n  if (state.pending[key] && (NOW - state.pending[key]) < PENDING_TTL) {\n    skipped++;\n    continue;\n  }\n\n  // reserve it\n  state.pending[key] = NOW;\n\n  // pass downstream with the dedupe key\n  out.push({ json: { ...j, dedupe_key: key } });\n  emitted += 1;\n  if (MAX_PER_RUN && emitted >= MAX_PER_RUN) break;\n}\n\n// Log deduplication stats\nconsole.log(`Deduplication: ${emitted} new articles, ${skipped} skipped (already posted/pending), ${Object.keys(state.posted).length} total posted, ${Object.keys(state.pending).length} pending`);\n\nreturn out;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        336
      ],
      "id": "e156418b-c486-4857-bcd4-c0911889e141",
      "name": "Store"
    },
    {
      "parameters": {
        "jsCode": "// Debug logging for deduplication\nconst items = await $input.all();\n\nif (items.length === 0) {\n  console.log('No new articles to process - all were deduplicated');\n} else {\n  console.log(`Processing ${items.length} new articles:`);\n  for (const item of items) {\n    const j = item.json || {};\n    console.log(`- ${j.title || 'No title'} (${j.dedupe_key})`);\n  }\n}\n\nreturn items;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        336
      ],
      "id": "47b92b95-1515-4514-9bf0-439c50d34344",
      "name": "Debug Log"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 4
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        1056
      ],
      "id": "f0b3d872-a9c0-4ddb-84d0-3fc48293e53c",
      "name": "Trigger1"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 6
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        864
      ],
      "id": "2d9347fc-b052-4e39-b6ee-201ddc0c01f8",
      "name": "Trigger2"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 8
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        192
      ],
      "id": "eb8f36da-8ec8-4a0e-bc7b-51203a95ea4d",
      "name": "Trigger3"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 10
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        0
      ],
      "id": "61027ab2-4216-4207-b2df-5cf386fe7f22",
      "name": "Trigger4"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 12
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        1232
      ],
      "id": "223e8ec7-9402-42ad-b7a7-c4d052bd93b4",
      "name": "Trigger"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 12
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        1408
      ],
      "id": "65f379ab-ac19-459d-8c3d-d188b19adf29",
      "name": "Trigger5"
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss/headlines/section/topic/BUSINESS?hl=en-AU&gl=AU&ceid=AU:en",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        224,
        1344
      ],
      "id": "eb9346d0-f1bd-4155-a803-882cfaf80bbb",
      "name": "Google - Business"
    },
    {
      "parameters": {
        "url": "https://news.google.com/rss?hl=en-AU&gl=AU&ceid=AU:en",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        224,
        1120
      ],
      "id": "da060601-9088-4b43-a74d-33ab82f296b8",
      "name": "Google - Australia"
    },
    {
      "parameters": {
        "url": "https://www.theblaze.com/feeds/feed.rss",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        224,
        1584
      ],
      "id": "1525ef55-3be1-4738-baa2-7a294124be23",
      "name": "Blaze"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 15
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        0,
        1584
      ],
      "id": "72fc49bd-53ce-47c3-bee9-b1d1e3063de3",
      "name": "Trigger6"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‚ÄòExecute workflow‚Äô": {
      "main": [
        [
          {
            "node": "RSS NASA",
            "type": "main",
            "index": 0
          },
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fox US Politics",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fox World",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google - Australia",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google - Business",
            "type": "main",
            "index": 0
          },
          {
            "node": "Blaze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Tiny": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "Text Cleanup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS NASA": {
      "main": [
        [
          {
            "node": "Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fox US Politics": {
      "main": [
        [
          {
            "node": "Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fox World": {
      "main": [
        [
          {
            "node": "Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Tiny",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches": {
      "main": [
        [
          {
            "node": "Data Cleaner",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Cleaner": {
      "main": [
        [
          {
            "node": "OG Metadata Fetcher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OG Metadata Fetcher": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Text Cleanup": {
      "main": [
        [
          {
            "node": "Publish new status",
            "type": "main",
            "index": 0
          },
          {
            "node": "Create a post",
            "type": "main",
            "index": 0
          },
          {
            "node": "Discord",
            "type": "main",
            "index": 0
          },
          {
            "node": "telegram",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "if - fail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Short": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait Long": {
      "main": [
        [
          {
            "node": "Split In Batches",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "if - fail": {
      "main": [
        [
          {
            "node": "Wait Long",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Commit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Commit": {
      "main": [
        [
          {
            "node": "Wait Short",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store": {
      "main": [
        [
          {
            "node": "Debug Log",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Debug Log": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger1": {
      "main": [
        [
          {
            "node": "Fox World",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger2": {
      "main": [
        [
          {
            "node": "Fox US Politics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger3": {
      "main": [
        [
          {
            "node": "RSS NASA",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger4": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Publish new status": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create a post": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Discord": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "telegram": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Trigger": {
      "main": [
        [
          {
            "node": "Google - Australia",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger5": {
      "main": [
        [
          {
            "node": "Google - Business",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google - Business": {
      "main": [
        [
          {
            "node": "Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google - Australia": {
      "main": [
        [
          {
            "node": "Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger6": {
      "main": [
        [
          {
            "node": "Blaze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Blaze": {
      "main": [
        [
          {
            "node": "Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "e9a0273e-01a2-4560-a412-44200a2557c2",
  "meta": {
    "instanceId": "4d9b5176904a7ad3adb817dfcf3ed0c7ce744108f936c17d31d5bb74b7b855c2"
  },
  "id": "U7F2zySX44bpXHyv",
  "tags": []
}